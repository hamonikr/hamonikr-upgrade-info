#!/bin/bash

# MIT License
# 
# Copyright (c) [year] [copyright holder]
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# 시스템 로케일 확인
locale=$(locale | grep LANG= | cut -d= -f2 | cut -d_ -f1)

# Function to display error message
error_message() {
    if [ "$locale" = "ko" ]; then
        echo -e "\e[31m오류: $1 작업이 실패했습니다.\e[0m"
    else
        echo -e "\e[31mERROR: Failed to execute $1.\e[0m"
    fi
}

# Function to display info message
info_message() {
    if [ "$locale" = "ko" ]; then
        echo -e "\e[92m정보: $1\e[0m"
    else
        echo -e "\e[92mINFO: $1\e[0m"
    fi
}

# Function for apt-get operations
apt_get_operation() {
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y --assume-yes --option Dpkg::Options::=--force-confnew --allow-remove-essential --allow-change-held-packages "$@" || error_message "$@ Execute"
}

# 현재 APT 저장소 설정 백업
do_backup() {
    info_message 'Prepare backup file for rollback...'
    for file in /etc/apt/sources.list.d/*.list; do
        if [ -f "$file" ]; then
            sudo cp -fv "$file" "${file}.bak"
            sudo rm -f "$file"
        fi
    done
}

# 스크립트 중단 시 롤백
do_rollback() {
    info_message 'The program has been interrupted. Roll back files...'
    for file in /etc/apt/sources.list.d/*.bak; do
        if [ -f "$file" ]; then
            original_file="${file%.bak}"
            sudo cp -fv "$file" "$original_file"
            sudo rm -f "$file"
        fi
    done
    apt-get update
}

trap do_rollback SIGINT SIGTERM EXIT INT TERM

### MAIN

# 시작 시간 기록
start_time=$(date +%s)

# sudo 권한 확인
if ! sudo -v; then
    if [ "$locale" = "ko" ]; then
        error_message "이 스크립트를 실행하기 위해서는 sudo 권한이 필요합니다."
    else
        error_message "sudo privileges are required to run this script."
    fi
    exit 1
fi

# sudo 세션 유지를 위한 백그라운드 루프
while true; do
    sudo -v
    sleep 60
done &

# 시작 메시지
if [ "$locale" = "ko" ]; then
    info_message "업그레이드 과정은 네트워크 환경에 따라 오래 걸릴 수 있습니다."
    echo ""
    info_message "[주의] 진행 과정에서 YES/NO를 묻는 화면이 나오면 YES를 누르세요."
    echo ""
    info_message "업그레이드 실패 시 다시 실행하시거나, ISO 파일로 설치를 시도하세요."
else
    info_message "The upgrade process may take a long time depending on your network environment."
    echo ""
    info_message "[INFO] Press YES when asked YES/NO during the upgrade process."
    echo ""
    info_message "If the upgrade fails, try running it again or consider installing via an ISO file."
fi

# 사용자에게 계속 진행할지 여부를 묻기
if [ "$locale" = "ko" ]; then
    read -p "계속하려면 Y를 누르세요 (Y/n): " user_choice
else
    read -p "Press Y to continue (Y/n): " user_choice
fi

# 사용자의 입력 확인
case $user_choice in
    [Yy]|"")
        echo "Continuing..."
        ;;
    *)
        echo "Exiting..."
        exit 1
        ;;
esac

# 현재 APT 환경 백업
do_backup

# 업그레이드 전 패키지 제거
sudo xset s off || error_message "xset s off"
sudo apt update || error_message "apt update"
apt_get_operation upgrade

# 삭제할 패키지 명을 배열로 저장
packages=("hamonikrreport" "hamonikrwelcome" "warpinator" "rabbitvcs-core" "hamonikr-nemo-rabbitvcs" "lupin-casper")

# 각 패키지에 대해 확인 후 purge 실행
for pkg in "${packages[@]}"; do
if dpkg -l | grep -q "$pkg"; then
    sudo apt-get purge -y "$pkg" || error_message "apt purge $pkg"
fi
done

# 새 버전 APT 저장소 추가
wget -qO- https://repo.hamonikr.org/add-hamonikr-kumkang.apt | sudo -E bash - || error_message "ADD APT Repository"
sudo apt update || error_message "apt update"
apt_get_operation install -f

# dist-upgrade
apt_get_operation dist-upgrade

# 새 버전 필수 패키지 설치
apt_get_operation install hamonikr-desktop-environment
apt_get_operation install hamonikr-system --reinstall

# 불필요한 패키지 제거
apt_get_operation autoremove

# APT 환경 초기화
apt_get_operation install -f

# 종료 시간 기록 및 실행 시간 계산
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))

# 시, 분, 초로 변환
hours=$((elapsed_time / 3600))
minutes=$(( (elapsed_time % 3600) / 60 ))
seconds=$((elapsed_time % 60))

# 실행 시간 출력
if [ "$locale" = "ko" ]; then
    info_message "전체 과정의 실행 시간: ${hours}시간 ${minutes}분 ${seconds}초"
else
    info_message "Total execution time: ${hours} hours ${minutes} minutes ${seconds} seconds"
fi

# 재시작 안내 및 사용자 입력 대기
if [ "$locale" = "ko" ]; then
    info_message "새 버전 적용을 위해서 시스템 재시작이 필요합니다."
    info_message "시스템을 재시작하려면 엔터를 누르세요. 재시작하지 않으려면 Ctrl+C를 누르세요."
else
    info_message "System restart is required to apply the new version."
    info_message "Press Enter to restart the system, or Ctrl+C to cancel."
fi

# 사용자 입력 대기
read -p ""

# trap 해제
trap - SIGINT SIGTERM EXIT INT TERM

# 시스템 재시작
sudo reboot

